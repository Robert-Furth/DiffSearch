basepython =      py27: python2.7      py34: python3.4      py35: python3.5      py36: python3.6 ->_
#  - python setup.py check (using the readme_renderer extension)  #     confirms your long_description will render correctly on pypi ->#  - python setup.py check  #     confirm required package meta-data in setup.py  #  - readme_renderer (when using a ReStructuredText README)  #     confirms your long_description will render correctly on PyPI. 
        'Programming Language :: Python :: 3.4', ->_
#  - python setup.py check (using the readme_renderer extension)  #     confirms your long_description will render correctly on pypi ->#  - python setup.py check  #     confirm required package meta-data in setup.py  #  - readme_renderer (when using a ReStructuredText README)  #     confirms your long_description will render correctly on PyPI. 
    packages=find_packages(exclude=['contrib', 'docs', 'tests']),  # Required ->    packages=find_packages(where='src'),  # Required  _     # Specify which Python versions you support. In contrast to the      # 'Programming Language' classifiers above, 'pip install' will check this      # and refuse to install the project if the version does not match. If you      # do not support Python 2, you can simplify this to '>=3.5' or similar, see      # https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires      python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4', 


_->include pyproject.toml  _
_->include pyproject.toml  _

# https://packaging.python.org/tutorials/distributing-packages/#wheels -># https://packaging.python.org/guides/distributing-packages-using-setuptools/#wheels 

_->    # Denotes that our long_description is in Markdown; valid values are      # text/plain, text/x-rst, and text/markdown      #      # Optional if long_description is written in reStructuredText (rst) but      # required for plain-text or Markdown; if unspecified, "applications should      # attempt to render [the long_description] as text/x-rst; charset=UTF-8 and      # fall back to text/plain if it is not valid rst" (see link below)      #      # This field corresponds to the "Description-Content-Type" metadata field:      # https://packaging.python.org/specifications/core-metadata/#description-content-type-optional      long_description_content_type='text/markdown',  # Optional (see note above)  _
_->    - python: 3.7        env: TOXENV=py37      - python: 3.8        env: TOXENV=py38 

    version='1.2.0',  # Required ->    version='1.3.1',  # Required 



_->    - python: 3.7        env: TOXENV=py37      - python: 3.8        env: TOXENV=py38 
#  - python setup.py check (using the readme_renderer extension)  #     confirms your long_description will render correctly on pypi ->#  - python setup.py check  #     confirm required package meta-data in setup.py  #  - readme_renderer (when using a ReStructuredText README)  #     confirms your long_description will render correctly on PyPI. 
envlist = py{27,34,35,36} ->envlist = py{27,35,36,37,38}  _ # Define the minimal tox version required to run;  # if the host tox is less than this the tool with create an environment and  # provision it with a tox that satisfies it under provision_tox_env.  # At least this version is needed for PEP 517/518 support.  minversion = 3.3.0  _ # Activate isolated build environment. tox will use a virtual environment  # to build a source distribution from the source tree. For build tools and  # arguments use the pyproject.toml file as specified in PEP-517 and PEP-518.  isolated_build = true 
#  - python setup.py check (using the readme_renderer extension)  #     confirms your long_description will render correctly on pypi ->#  - python setup.py check  #     confirm required package meta-data in setup.py  #  - readme_renderer (when using a ReStructuredText README)  #     confirms your long_description will render correctly on PyPI. 
# This includes the license file in the wheel.  license_file = LICENSE.txt -># This includes the license file(s) in the wheel.  # https://wheel.readthedocs.io/en/stable/user_guide.html#including-license-files-in-the-generated-wheel-file  license_files = LICENSE.txt 

_->        # These classifiers are *not* checked by 'pip install'. See instead          # 'python_requires' below. 

_->    # Denotes that our long_description is in Markdown; valid values are      # text/plain, text/x-rst, and text/markdown      #      # Optional if long_description is written in reStructuredText (rst) but      # required for plain-text or Markdown; if unspecified, "applications should      # attempt to render [the long_description] as text/x-rst; charset=UTF-8 and      # fall back to text/plain if it is not valid rst" (see link below)      #      # This field corresponds to the "Description-Content-Type" metadata field:      # https://packaging.python.org/specifications/core-metadata/#description-content-type-optional      long_description_content_type='text/markdown',  # Optional (see note above)  _

A sample Python project  =======================  _ A sample project that exists as an aid to the `Python Packaging User Guide  <https://packaging.python.org>`_'s `Tutorial on Packaging and Distributing  Projects <https://packaging.python.org/en/latest/distributing.html>`_.  _ This projects does not aim to cover best practices for Python project  development as a whole. For example, it does not provide guidance or tool  recommendations for version control, documentation, or testing.  _ `The source for this project is available here  <https://github.com/pypa/sampleproject>`_.  _ Most of the configuration for a Python project is done in the ``setup.py``  file, an example of which is included in this project. You should edit this  file accordingly to adapt this sample project to your needs.  _->_
#  - python setup.py check (using the readme_renderer extension)  #     confirms your long_description will render correctly on pypi ->#  - python setup.py check  #     confirm required package meta-data in setup.py  #  - readme_renderer (when using a ReStructuredText README)  #     confirms your long_description will render correctly on PyPI. 
_->    # Denotes that our long_description is in Markdown; valid values are      # text/plain, text/x-rst, and text/markdown      #      # Optional if long_description is written in reStructuredText (rst) but      # required for plain-text or Markdown; if unspecified, "applications should      # attempt to render [the long_description] as text/x-rst; charset=UTF-8 and      # fall back to text/plain if it is not valid rst" (see link below)      #      # This field corresponds to the "Description-Content-Type" metadata field:      # https://packaging.python.org/specifications/core-metadata/#description-content-type-optional      long_description_content_type='text/markdown',  # Optional (see note above)  _






_-># io.open is needed for projects that support Python 2.7  # It ensures open() defaults to text mode with universal newlines,  # and accepts an argument to specify the text encoding  # Python 3 only projects can skip this import  from io import open 


_-># io.open is needed for projects that support Python 2.7  # It ensures open() defaults to text mode with universal newlines,  # and accepts an argument to specify the text encoding  # Python 3 only projects can skip this import  from io import open 
https://packaging.python.org/en/latest/distributing.html ->https://packaging.python.org/guides/distributing-packages-using-setuptools/ 

_-># io.open is needed for projects that support Python 2.7  # It ensures open() defaults to text mode with universal newlines,  # and accepts an argument to specify the text encoding  # Python 3 only projects can skip this import  from io import open 

_->include pyproject.toml  _
    version='1.2.0',  # Required ->    version='1.3.1',  # Required 

_->include pyproject.toml  _
_->        # These classifiers are *not* checked by 'pip install'. See instead          # 'python_requires' below. 



_->[build-system]  # These are the assumed default build requirements from pip:  # https://pip.pypa.io/en/stable/reference/pip/#pep-517-and-518-support  requires = ["setuptools>=40.8.0", "wheel"]  build-backend = "setuptools.build_meta" 

_->include pyproject.toml  _
https://packaging.python.org/en/latest/distributing.html ->https://packaging.python.org/guides/distributing-packages-using-setuptools/ 

    - python: 3.4        env: TOXENV=py34 ->_
    # http://docs.python.org/3.4/distutils/setupscript.html#installing-additional-files # noqa ->    # http://docs.python.org/3.4/distutils/setupscript.html#installing-additional-files      # 
https://packaging.python.org/en/latest/distributing.html ->https://packaging.python.org/guides/distributing-packages-using-setuptools/ 


envlist = py{27,34,35,36} ->envlist = py{27,35,36,37,38}  _ # Define the minimal tox version required to run;  # if the host tox is less than this the tool with create an environment and  # provision it with a tox that satisfies it under provision_tox_env.  # At least this version is needed for PEP 517/518 support.  minversion = 3.3.0  _ # Activate isolated build environment. tox will use a virtual environment  # to build a source distribution from the source tree. For build tools and  # arguments use the pyproject.toml file as specified in PEP-517 and PEP-518.  isolated_build = true 



#  - python setup.py check (using the readme_renderer extension)  #     confirms your long_description will render correctly on pypi ->#  - python setup.py check  #     confirm required package meta-data in setup.py  #  - readme_renderer (when using a ReStructuredText README)  #     confirms your long_description will render correctly on PyPI. 




_->    - python: 3.7        env: TOXENV=py37      - python: 3.8        env: TOXENV=py38 
    version='1.2.0',  # Required ->    version='1.3.1',  # Required 






#  - python setup.py check ->#  - python setup.py check 



# To use a consistent encoding  from codecs import open ->_


# To use a consistent encoding  from codecs import open ->_
        'Programming Language :: Python :: 3.4', ->_


# To use a consistent encoding  from codecs import open ->_
    # installed, specify them here.  If using Python 2.6 or less, then these      # have to be included in MANIFEST.in as well.      package_data={ ->    # installed, specify them here.      #      # If using Python 2.6 or earlier, then these have to be included in      # MANIFEST.in as well.      package_data={  # Optional 


    version='1.2.0',  # Required ->    version='1.3.1',  # Required 
    py.test tests ->    py.test tests {posargs}  _
envlist = py{27,34,35,36} ->envlist = py{27,35,36,37,38}  _ # Define the minimal tox version required to run;  # if the host tox is less than this the tool with create an environment and  # provision it with a tox that satisfies it under provision_tox_env.  # At least this version is needed for PEP 517/518 support.  minversion = 3.3.0  _ # Activate isolated build environment. tox will use a virtual environment  # to build a source distribution from the source tree. For build tools and  # arguments use the pyproject.toml file as specified in PEP-517 and PEP-518.  isolated_build = true 
https://packaging.python.org/en/latest/distributing.html ->https://packaging.python.org/guides/distributing-packages-using-setuptools/ 
