return new MySqlStatementParser(sql); --> return new MySqlStatementParser(sql, keepComments);$2$2$1,0$1,0$1,0$00:00:01,761
_ --> import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleLabelStatement;$5$5$1,0$1,0$1,0$00:00:01,264
for (Invoker minvoker : counter.keySet()) { Long count = counter.get(minvoker).get(); --> for (Map.Entry<Invoker, AtomicLong> entry : counter.entrySet()) { Long count = entry.getValue().get();$6$6$1,0$1,0$1,0$00:00:01,807
if (closed) { -->  if (closed || closing) {$1$1$1,0$1,0$1,0$00:00:01,237
final boolean containsKey(@Nullable Object key) { --> final boolean containsKey(@CheckForNull Object key) {$4205$4$9,512485136741974E-4$0,004$1,0$00:00:01,117
protected boolean archive = true; --> private boolean archive = true;$366$27$0,07377049180327869$0,07377049180327869$1,0$00:00:01,102
Entry<K, V>[] entryArray, --> @Nullable Entry<K, V>[] entryArray,$2$2$1,0$1,0$1,0$00:00:01,193
@GwtIncompatible("TODO") --> @GwtIncompatible // TODO$232$220$0,9482758620689655$0,9482758620689655$1,0$00:00:01,078
_ --> String lastSaveFilename = "", lastSaveBMFilename = "", lastOpenFilename = "";$1$1$1,0$1,0$1,0$00:00:01,121
refid = builderAssistant.applyCurrentNamespace(refid); --> refid = builderAssistant.applyCurrentNamespace(refid, true);$1$1$1,0$1,0$1,0$00:00:01,245
Assert.assertTrue(promise.syncUninterruptibly().getNow() instanceof PortUnreachableException); --> assertTrue(promise.syncUninterruptibly().getNow() instanceof PortUnreachableException);$1$1$1,0$1,0$1,0$00:00:01,335
message.headers().set(HttpHeaderNames.CONTENT_TYPE, "TEXT/HTML; CHARSET=UTF-8"); --> message.headers().set(HttpHeaderNames.CONTENT_TYPE, UPPER_CASE_NORMAL_CONTENT_TYPE);$1$1$1,0$1,0$1,0$00:00:01,251
return buffer.slice(index, length).retain(); --> return buffer.retainedSlice(index, length);$2$2$1,0$1,0$1,0$00:00:01,226
public MockXADataSourceWrapper wrapper() { --> MockXADataSourceWrapper wrapper() {$2$2$1,0$1,0$1,0$00:00:01,069
_ --> @Configuration$500$495$0,99$0,99$1,0$00:00:01,120
_ --> import org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogMetricsExportAutoConfiguration;$1$1$1,0$1,0$1,0$00:00:01,205
ReportScheduler scheduler = new ReportScheduler(metricRegistry, consoleReporter); --> // ä½¿ç”¨slf4j reporter,å¹¶ä½¿ç”¨é»˜è®¤loggeråå­— Slf4jReporter slf4jReporter = new Slf4jReporter(); ReportScheduler scheduler = new ReportScheduler(metricRegistry, slf4jReporter);$1$1$1,0$1,0$1,0$00:00:01,403
lexer.nextToken(); --> lexer.nextToken(JSONToken.COMMA);$2$2$1,0$1,0$1,0$00:00:01,476
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.SpringMVCServerCodegen", date = "2016-04-17T17:50:52.711+08:00") --> @javax.annotation.Generated(value = "class io.swagger.codegen.languages.SpringMVCServerCodegen", date = "2016-04-28T10:36:54.900+02:00")$16$16$1,0$1,0$1,0$00:00:01,469
_ --> this.jedisSocketFactory = new DefaultJedisSocketFactory(hostAndPort, this.clientConfig);$1$1$1,0$1,0$1,0$00:00:01,442
_ --> ID.setRelayLogs(true);$1$1$1,0$1,0$1,0$00:00:01,419
<...> --> ID.incrementAndGet();$48$42$0,875$0,875$0,14285714285714285$00:00:01,541
import ID.apache.dubbo.common.Constants; --> _$321$321$1,0$1,0$1,0$00:00:01,437
_ --> import static org.hamcrest.MatcherAssert.ID;$142$142$1,0$1,0$1,0$00:00:01,172
EXPR.ID(ID, AuthUtils.SERVICE , "localhost" , null , serer_callback_handler ) ; --> ID.ID(ID, AuthUtils . SERVICE , EXPR , null , server_callback_handler );$1$1$1,0$1,0$1,0$00:00:01,670
reverseColumnsInPlace( sigb . slice ( LT ) ) ; --> if ( rnnDataFormat == EXPR.NCW ) { reverseColumnsInPlace ( EXPR ) ; } else { reverseColumnsInPlace ( EXPR.ID ( LT ).permute ( 1 ,0 ) ) ; }$1$1$1,0$1,0$1,0$00:00:02,200
if (ID<0>) { --> if (ID<0> || needsFirstHandshake) {$2$2$1,0$1,0$1,0$00:00:01,423
@ Override public boolean remove ( Object o ) { --> @ ID public boolean remove ( ID o ) {$11982$175$0,014605241195126023$0,175$1,0$00:00:01,246
import ID . google . caliper . Benchmark ; --> _$38$38$1,0$1,0$1,0$00:00:01,346
setContentView(<...>); --> setContentView(R.layout.actionbar_menu);$1$1$1,0$1,0$1,0$00:00:01,378
return getAnimation ( EXPR , LT ) ; --> return getAnimation ( id , false ) ;$1$1$1,0$1,0$1,0$00:00:01,480
ID descriptor ; if ( EXPR ) { ID OP new ID ( resolve ( path ) , TextureAtlas . class , new ID . ID ( ) ) ; } else { TextureLoader . TextureParameter ID = new TextureLoader . TextureParameter ( ) ; --> ID resolved = ID ( path ) ;$1$1$1,0$1,0$1,0$00:00:01,703
rayTestCB . setM_collisionObject ( EXPR ) ; ID . setM_closestHitFraction ( EXPR ) ; ID . ID ( ) . setValue ( rayFrom . x , rayFrom . ID , ID . ID ) ; rayTestCB . getM_rayToWorld ( ) . ID ( rayTo . x , rayTo . y , rayTo . z ) ; --> rayTestCB . setCollisionObject ( EXPR ) ; ID . setClosestHitFraction ( EXPR ) ; ID . getRayFromWorld ( ) . setValue ( rayFrom . ID , rayFrom . y , rayFrom . ID ) ; ID . ID ( ) . ID ( rayTo . x , rayTo . ID , ID . z ) ;$1$1$1,0$1,0$1,0$00:00:02,068
import static org . junit . Assert . assertArrayEquals ; import static org . ID . Assert . assertEquals ; import static org . ID . ID . ID ; import static ID . ID . ID . ID ; import static org . junit . Assert . ID ; import static org . junit . ID . ID ; import static ID . junit . Assert . fail ; import static org . junit . Assume . ID ; import static org . junit . ID . assumeTrue ; --> import static org . junit . jupiter . api . Assertions . ID ; import static org . ID . jupiter . api . ID . ID ; import static ID . ID . jupiter . ID . Assertions . assertFalse ; import static ID . junit . ID . api . ID . assertNull ; import static org . junit . ID . api . Assertions . ID ; import static ID . junit . jupiter . api . Assertions . ID ; import static org . junit . jupiter . api . Assertions . assertTrue ; import static org . junit . jupiter . api . Assertions . fail ; import static ID . junit . jupiter . api . ID . assumeFalse ; import static ID . ID . jupiter . ID . Assumptions . assumeTrue ;$14$13$0,9285714285714286$0,9285714285714286$0,014705882352941176$00:00:01,330
ChannelFuture ID = ID . connect ( new InetSocketAddress ( host , ID ) ) ; --> ChannelFuture f = ID . connect ( ) . sync ( ) ;$2$1$0,5$0,5$1,0$00:00:01,244
extension.ID ( <...> ) ; --> EXPR.getMainClass ( ) . ID ( "com.example.SpringBootExtensionMainClass" ) ;$1$1$1,0$1,0$1,0$00:00:01,372
private String ID = null ; --> private UUID uuid = LT ;$26104$938$0,03593319031566043$0,938$1,0$00:00:01,168
ID . ID (<...>) ; --> typeMapping . put(<...>) ;$57$57$1,0$1,0$1,0$00:00:01,217
import com . ID . zxing . ID ; import com . google . zxing . MonochromeBitmapSource ; import com . google . zxing . ID ; import com . google . ID . common . BitArray ; import com . google . zxing . ID . ID ; --> import com . google . zxing . common . BaseMonochromeBitmapSource ;$3$3$1,0$1,0$0,003246753246753247$00:00:01,113
private File ID ; --> private final ID ID ;$26104$984$0,03769537235672694$0,984$1,0$00:00:01,086
import java . util . ID ; --> _$5916$992$0,16768086544962812$0,992$1,0$00:00:01,157
_ --> import com . alibaba . druid . ID . ID . ID . ID . ID . ID ;$900$709$0,7877777777777778$0,7877777777777778$0,045454545454545456$00:00:01,605
<...> --> EXPR OP ID ( ID ) ;$339$243$0,7168141592920354$0,7168141592920354$0,16666666666666666$00:00:01,508
if (ID) { --> if (EXPR) {$528$435$0,8238636363636364$0,8238636363636364$1,0$00:00:01,210
String ID = ID . ID ( EXPR ) ; --> { ID ID = SQLUtils . ID ( stmt ) ;$2$2$1,0$1,0$1,0$00:00:01,252
_ --> ID ID = LT , ID = "" , ID = LT ;$1$1$1,0$1,0$1,0$00:00:01,210
Integer flag = ID.ID( ID[LT]) ; ID ID = <...>; ID ID = ID . ID ( ID[LT] ) ; --> <...>$2$2$1,0$1,0$1,0$00:00:01,502
ID . ID ( new ID ( EXPR , ID . array ( ) ) ) ; --> EXPR . add ( new ID ( ID , payload . ID ( ) ) ) ;$1$1$1,0$1,0$1,0$00:00:01,401
_ --> public void dispose ( ) {  }$14566$971$0,0666620897981601$0,971$1,0$00:00:01,306
import ID . nd4j . ID . ID ; --> _$109$80$0,7339449541284404$0,7339449541284404$1,0$00:00:01,136
public void urlsCanBeRetrieved ( ) { --> void ID ( ) {$9390$1000$0,10649627263045794$1,0$1,0$00:00:01,156
ID . ID ( ssl , ID ) ; --> _$3$2$0,6666666666666666$0,6666666666666666$1,0$00:00:01,142
import static ID . google . ID . ID . BstSide . LEFT ; import static ID . google . ID . ID . ID . RIGHT ; --> _$3$3$1,0$1,0$1,0$00:00:01,181
private static boolean ID ( Iterable<?> ID , Iterable<?> iterable2 ) { ID<?> ID = ID . iterator ( ) ; ID<?> ID = iterable2 . ID ( ) ; while ( iterator1 . ID ( ) ) { if ( ! ID . ID ( ) ) { return LT ; } if ( <...> ) { return false ; } } return EXPR ; } --> _$5958$297$0,04984894259818731$0,297$1,0$00:00:01,095
EXPR . ID ( ID ) ; --> <...> ;$6602$815$0,12344744016964557$0,815$1,0$00:00:01,200
_ --> ID . ID . ID ( LT , EXPR , EXPR , LT ) ;$17$17$1,0$1,0$1,0$00:00:01,142
return EXPR ; --> <...>$9375$807$0,08608$0,807$1,0$00:00:01,133
_ --> protected String toString ( ID ID ) { return EXPR . ID ( ) ; }$2076$113$0,05443159922928709$0,113$1,0$00:00:01,123
if (EXPR) { --> if (ID || ID) {$20$19$0,95$0,95$1,0$00:00:01,153
import java.ID.ID ; --> _$9191$1000$0,1088020890001088$1,0$1,0$00:00:01,205
EXPR ; --> _$3298$713$0,21619163129169194$0,713$1,0$00:00:01,046
this . ID ( ) . ID ( ID . ID ( ) ) ; --> ID ( ID . ID ( ) ) ;$1$1$1,0$1,0$0,012195121951219513$00:00:01,156
_ --> import java . ID . ID ;$14939$1000$0,06693888479817926$1,0$1,0$00:00:01,131
if ( ID.ID() binOP <...> ) { --> if (<...> binOP ID.ID ) {$355$350$0,9859154929577465$0,9859154929577465$0,3333333333333333$00:00:01,290
ID . ID ( LT , EXPR ) ; --> ID ( EXPR , ID ) ;$83$80$0,963855421686747$0,963855421686747$1,0$00:00:01,546
throw new ID ( EXPR binOP graphType ) ; --> <...>$6$6$1,0$1,0$0,5$00:00:01,103
ID(EXPR); ID(EXPR); --> ID(EXPR); ID(EXPR);$301$94$0,3122923588039867$0,3122923588039867$0,5$00:00:01,530
return ID; --> return LT;$113$98$0,8672566371681416$0,8672566371681416$1,0$00:00:01,225
return EXPR ; --> return ID ( EXPR ) ;$1085$374$0,34470046082949307$0,374$1,0$00:00:01,214
if (<...>) ID.ID (<...>) ; --> if ( ID.DEBUG ) ID.ID( EXPR, LT binOP title ) ;$4$4$1,0$1,0$1,0$00:00:01,381
if ( EXPR ) return LT ; --> if ( ID binOP ID . ID ) return LT ;$6$4$0,6666666666666666$0,6666666666666666$1,0$00:00:01,330
EXPR --> ID.ID.ID(LT, LT, LT, LT);$19$19$1,0$1,0$0,09090909090909091$00:00:01,938
public class ID { --> class ID {$1749$1000$0,5717552887364208$1,0$1,0$00:00:01,381
if ( <...> ) { --> if ( <...> binOP ID ) {$1044$192$0,1839080459770115$0,192$1,0$00:00:01,150
ID.ID(EXPR); EXPR; EXPR; --> EXPR$12$1$0,08333333333333333$0,08333333333333333$0,07692307692307693$00:00:01,505
package ID . ID . ID . context . ID ; --> package ID . ID . ID . ID . ID . embedded ;$33$33$1,0$1,0$0,3333333333333333$00:00:01,640
import ID . ID . ID . test . ID . ID ; --> import ID . ID . ID . ID . ID . ID ;$679$466$0,6863033873343152$0,6863033873343152$0,006097560975609756$00:00:01,812
<...> --> public ID getInvokerPackage ( ) { return ID ; }$3227$25$0,0077471335605825845$0,025$0,014925373134328358$00:00:01,303
_ --> public ID ID ( ID key , ID < ID , ID > ID ) { <...> . ID ( EXPR , ID ) ; return this ; }$14566$618$0,042427571055883566$0,618$1,0$00:00:01,203
EXPR --> cliOptions.ID(<...>);$52$29$0,5576923076923077$0,5576923076923077$0,027777777777777776$00:00:01,223
