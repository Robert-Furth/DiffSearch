_ -->import java.util.Optional; import java.util.Set; import java.util.concurrent.Executors;$405$1,0$1,0$1,0$00:00:03,986
t = PrimitiveType.I32; --> ty = PrimitiveType.I32;$2$1,0$1,0$1,0$00:00:11,490
println(e) --> e$143$1,0$1,0$1,0$00:00:05,646
long lookupMethodInPool(long metaspaceConstantPool, int cpi, byte opcode, long[] unresolvedInfo); --> long lookupKlassInPool(long metaspaceConstantPool, int cpi);$1$1,0$1,0$1,0$00:00:08,243
_ -->import com.oracle.jvmci.asm.sparc.*;$34$1,0$1,0$1,0$00:00:03,431
public void generate(NodeLIRBuilderTool gen, LIRGenerationResult res) { --> public void generate(NodeLIRBuilderTool gen) {$3$1,0$1,0$0,5$00:00:05,969
searchHit.getSource().clear(); searchHit.getSource().putAll(results); --> searchHit.getSourceAsMap().clear(); searchHit.getSourceAsMap().putAll(results);$1$1,0$1,0$1,0$00:00:14,168
return sub(left, toComparableValue.execute(right)); --> return sub(left, toComparableValue.executeWithTarget(right));$1$1,0$1,0$1,0$00:00:07,706
_ -->import static org.graalvm.compiler.hotspot.HotSpotForeignCallLinkage.RegisterEffect.DESTROYS_REGISTERS;$2$1,0$1,0$1,0$00:00:03,387
Arrays.sort(files); --> Arrays.sort(files, naturalComparator);$1$1,0$1,0$1,0$00:00:07,574
return isHostConfiguration() ? (label + " (host)") : label.toString(); --> return label.toString();$1$1,0$1,0$1,0$00:00:09,484
import android.support.design.widget.FloatingActionButton; -->_$3$1,0$1,0$1,0$00:00:03,321
return types; --> return foundTypes;$4$1,0$1,0$1,0$00:00:04,951
throw JVMCIError.shouldNotReachHere(); --> throw GraalError.shouldNotReachHere();$179$1,0$1,0$1,0$00:00:06,044
this.id = result.getRuntime().getBitcodeID(); -->_$2$1,0$1,0$1,0$00:00:06,666
try (ToLibGraalScope<TruffleToLibGraal.Id> s = new ToLibGraalScope<>(InitializeRuntime, env)) { --> try (JNILibGraalScope<TruffleToLibGraal.Id> s = new JNILibGraalScope<>(InitializeRuntime, env)) {$1$1,0$1,0$1,0$00:00:13,824
byte[] memo = hasChildren ? null : LEAF_MEMO; --> byte[] memo = hasChildren ? null : NO_MEMO;$2$1,0$1,0$1,0$00:00:06,435
@JsonProperty -->_$110$1,0$1,0$1,0$00:00:03,514
StructuredGraph graph = parseEager(method, AllowAssumptions.YES, options); --> StructuredGraph graph = parseEager(method, AllowAssumptions.YES, goptions);$1$1,0$1,0$1,0$00:00:06,904
public int read(char cbuf[], int off, int len) throws IOException { --> public int read(char[] cbuf, int off, int len) throws IOException {$1$1,0$1,0$1,0$00:00:08,025
import com.oracle.ID.ID.ID.*; -->_$2916$1,0$1,0$1,0$00:00:03,534
ID<0>(ID<1>, args, context); --> ID<0>(ID<1>, args, intrinsic);$1$1,0$1,0$1,0$00:00:06,591
annotationWriter.write(appendable, context).append(LT); --> annotationWriter.write(appendable, context).append(ID);$1$1,0$1,0$1,0$00:00:10,310
int remainBytes = EXPR<0> = EXPR --> int remainBytes = EXPR<0> = EXPR$4052$0,2977441399074142$0,8104$1,0$00:00:04,950
_ --> return ID.getValue(<...>);$7$0,5833333333333334$0,5833333333333334$1,0$00:00:07,189
codeCache.ID(method, compResult); --> <...>$2$1,0$1,0$1,0$00:00:07,769
if (ID<0> == null) return; --> if (ID<0> == null) { return; }$5$1,0$1,0$0,5$00:00:11,293
_ --> if (EXPR binOP EXPR) { return; }$61$0,9838709677419355$0,9838709677419355$1,0$00:00:09,598
log.debug(LT, ID); --> LOG.debug(LT, ID);$19$1,0$1,0$0,5$00:00:06,174
if (type instanceof IntegerType) { return ID.ID(EXPR, EXPR); --><...>$1$1,0$1,0$1,0$00:00:13,923
ID slotSize = WordFactory.unsigned(EXPR); -->_$1$1,0$1,0$1,0$00:00:05,512
public static double[][] ID(float[] ID<0>) { return EXPR; --> static double[][] ID(float[] ID<0>) { return EXPR;$1$1,0$1,0$1,0$00:00:08,095
return EXPR; --> return useLibraryConstant(EXPR);$1$1,0$1,0$0,5$00:00:04,921
import static ID.ID.ID.ID.ID; -->_$106$1,0$1,0$1,0$00:00:04,009
if (EXPR<0>) ID = QueryParamEntity.empty(); --> if (EXPR<0>) { ID = QueryParamEntity.empty(); }$2$1,0$1,0$1,0$00:00:14,416
public void ID() { --> public void profileInlinedCall() { <...>$1$1,0$1,0$1,0$00:00:04,874
_ --> res = res binOP LT + (vararg ? LT : LT);$1$1,0$1,0$1,0$00:00:10,271
_ -->import io.ID.ID.ID.ID;$1759$1,0$1,0$1,0$00:00:03,637
package com.oracle.max.graal.ID.ID; -->package com.oracle.graal.ID.ID;$934$1,0$1,0$1,0$00:00:03,908
Assert.assertEquals(1, test(<...>)); --> runTest("test", <...>);$88$1,0$1,0$0,045454545454545456$00:00:07,501
import org.ID.ID.ID.ID; -->import org.ID.ID.ID.ID; <...>$676$1,0$1,0$1,0$00:00:28,017
<...> --> return Optional.of(EXPR);$67$1,0$1,0$1,0$00:00:06,054
package <...>; -->package ID.ID.ID.ID;$3393$1,0$1,0$1,0$00:00:03,856
ID = LT; --> ID = LT; ID = LT;$14$1,0$1,0$0,2$00:00:09,401
ID<0>(LT, ID); --> ID<0>(false);$2$1,0$1,0$0,011627906976744186$00:00:06,678
for (AudioTrack audioTrack : ID.ID) { <...> --> <...>$1$1,0$1,0$1,0$00:00:11,194
GalleryComment comment = ID[EXPR]; --> GalleryComment comment = ID.ID[EXPR];$1$1,0$1,0$1,0$00:00:06,622
_ -->import ID.ID.ID; import ID.ID.ID; import ID.ID.ID;$4998$0,3142605633802817$0,9996$1,0$00:00:04,106
Collection<ID> ID(<...>) { --> Collection<ID> generateSyntheticBean(<...>) {$2$1,0$1,0$0,3333333333333333$00:00:07,147
@Before public void ID() throws ID { --> @BeforeClass public static void ID() throws ID {$5$1,0$1,0$1,0$00:00:05,885
ID<0> = this; --> ID<0> = this.ID();$7$1,0$1,0$0,25$00:00:06,391
ID<0>.incrementHost(EXPR); --> ID<0>.incrementSource(EXPR);$5$1,0$1,0$1,0$00:00:06,233
return ID; --> return EXPR binOP EXPR;$28$0,7368421052631579$0,7368421052631579$0,16666666666666666$00:00:10,182
_ -->import com.oracle.ID.ID.ID.ID;$4984$0,6457631510754082$0,9968$1,0$00:00:05,174
_ -->public boolean ID<0>() { return ID.ID<0>(); }$14$1,0$1,0$0,3333333333333333$00:00:05,932
ID.ID(EXPR, EXPR); --> ID();$6$0,25$0,25$0,011627906976744186$00:00:06,605
return null; --> throw EXPR;$6$1,0$1,0$0,023255813953488372$00:00:05,825
throw EXPR; --> throw new GraalError(EXPR);$1$1,0$1,0$0,5$00:00:05,874
@SuppressWarnings(<...>) -->_$2362$0,37557640324375896$0,4724$1,0$00:00:04,558
<...> --> merge.setNext(EXPR);$3$1,0$1,0$1,0$00:00:05,855
ID(); ID(); --> ID(); ID();$9$1,0$1,0$0,1111111111111111$00:00:08,565
final ID<0> ID<1> = EXPR; --> final ID<0> ID<1> = EXPR;$300$0,9933774834437086$0,9933774834437086$1,0$00:00:06,037
_ -->import static ID.ID.ID.ID;$968$1,0$1,0$1,0$00:00:04,873
ID ID = ID.ID(); -->_$355$0,9646739130434783$0,9646739130434783$0,5$00:00:05,080
return ID; --> return EXPR;$1007$0,5466883821932682$0,5466883821932682$1,0$00:00:04,621
this.ID = EXPR; -->_$1364$0,9612403100775194$0,9612403100775194$1,0$00:00:04,405
ID(EXPR); ID(EXPR); --> ID(EXPR); ID(EXPR);$183$0,9945652173913043$0,9945652173913043$0,3333333333333333$00:00:15,859
<...> --> return ID.ID(EXPR, EXPR);$1766$0,5611693676517318$0,5611693676517318$1,0$00:00:04,926
ID ID = EXPR; --> final ID ID = EXPR;$30$1,0$1,0$0,030303030303030304$00:00:05,998
ID ID = ID.ID(EXPR, EXPR); --> ID ID = ID.ID(EXPR, EXPR);$666$0,5615514333895447$0,5615514333895447$1,0$00:00:19,958
this.ID<0> = ID.ID(ID<0>); --> this.ID<0> = ID<0>;$22$1,0$1,0$0,022222222222222223$00:00:06,985
ID(ID, ID); -->_$105$0,7191780821917808$0,7191780821917808$0,5$00:00:05,092
_ --> for (ID ID<0> = EXPR; ID<0> binOP EXPR; ID<0> unOP) { <...>$2$1,0$1,0$0,0036363636363636364$00:00:12,967
ID<0>(LT); --> ID<0>(LT);$898$0,9944629014396457$0,9944629014396457$1,0$00:00:05,771
_ --> EXPR.ID(EXPR, LT);$385$0,918854415274463$0,918854415274463$0,25$00:00:06,831
ID<0>.ID<1>(LT, ID) --> ID<0>.ID<1>(LT, EXPR)$319$0,32852729145211124$0,32852729145211124$0,0196078431372549$00:00:06,138
<...> --> new ID[]{}$42$1,0$1,0$1,0$00:00:07,210
(ID binOP LT) binOP (ID binOP LT) --> <...>$13$0,9285714285714286$0,9285714285714286$0,09090909090909091$00:00:10,058
ID unOP; --> ID unOP;$55$1,0$1,0$1,0$00:00:09,435
ID OP ID; --> ID OP EXPR;$254$0,7962382445141066$0,7962382445141066$1,0$00:00:04,983
