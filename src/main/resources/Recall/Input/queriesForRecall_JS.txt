_ --> 'hasCORS': false,
_ --> this.setState({routerClasses: 'page-current'});
var attr = new core.Attr(name, value); --> var attr = this.ownerDocument.createAttribute(name, value);
change_skin('skin-blue-light'); --> _
position: relative; --> _
sleep(delay) --> await sleep(delay)
var buttonEl = this; --> var $buttonEl = $(this);
this.timeout(200); --> this.timeout(1500);
_ --> this.audioController = audioControllerFactory();
body = this.json(params); --> _
if (a != undefined) --> if (a)
if (value) {expressions.push(value); --> argsComma.push(value);
lastTradeTimestamp = timeFilled; --> lastTradeTimestamp = timeFilled * 1000;
if (roomUrl == null) --> if (roomUrl === null)
_ --> throw e;}return true;}
return app.ready(); --> _
while (true) --> while (current)
success_callback(); --> _
getDesktopStreamFailed(); --> getDesktopStreamFailed(error);
return input; --> return null;
_ --> 'hasCORS': LT,
_ --> ID.ID({routerClasses: 'page-current'});
var attr = new ID.Attr(ID, ID); --> var attr = this.ownerDocument.ID(ID, ID);
ID('skin-blue-light'); --> _
ID: relative; --> _
ID(delay) --> await ID(delay)
var buttonEl = ID<0>; --> var $buttonEl = $(ID<0>);
ID<0>.timeout(LT); --> ID<0>.timeout(LT);
_ --> ID.ID = audioControllerFactory();
body = this.ID(ID); --> _
if (ID<0> != undefined) --> if (ID<0>)
if (ID<0>) {expressions.push(ID<0>); --> argsComma.push(ID<0>);
ID<0> = timeFilled; --> ID<0> = timeFilled * 1000;
if (ID<0> == null) --> if (ID<0> === null)
_ --> throw e;}return LT;}
return ID.ready(); --> _
while (LT) --> while (ID)
ID(true); --> _
ID<0>(); --> ID<0>(error);
return ID; --> return null;
if(EXPR) --> if(EXPR),
_ --> ID.ID({ID: LT});
var attr = new ID.Attr(ID, ID); --> var attr = this.ownerDocument.ID(ID, ID);
ID(LT); --> _
ID: ID;  --> _
ID(ID) --> await ID(ID)
var ID = ID; --> var ID  = $(ID);
ID<0>.ID<1>(LT); --> ID<0>.ID<1>(LT);
_ --> ID.ID = ID();
ID = this.ID(ID); --> _
if (ID<0> != ID) --> if (ID<0>)
if (ID<0>) {ID.ID(ID<0>); --> ID.ID(ID<0>);
ID<0> = ID; --> ID<0> = ID * 1000;
if (ID<0> == LT) --> if (ID<0> === LT)
_ --> throw ID;}return LT;}
return ID.ID(); --> _
while (LT) --> while (EXPR)
ID(LT); --> _
ID<0>(); --> ID<0>(ID);
return ID; --> return LT;
_ --> LT :LT,
_ --> ID.ID({ID: EXPR});
var ID<0> = new ID.ID(<...>); -->var ID<0> = ID.ID.ID(<...>);
ID(<...>); --> _
ID: EXPR;-->_
ID<0>: LT --> ID<0>: LT
<...> --> await <...>
var ID = <...>; --> var ID = ID(<...>);
this.ID<0>(EXPR); --> this.ID<0>(EXPR);
_ --> ID.ID = ID(<...>);
ID = ID.ID(<...>); -->_
if (ID binOP ID) -->  if (<...>)
if (ID) { ID.ID(<...>); --><...>
<...> = EXPR<0>;--><...> = EXPR<0> binOP EXPR;
if (ID<0> binOP null)-->if (ID<0> binOP null)
_-->throw EXPR;
return ID.ID(<...>);-->_
while (<...>) --> while (<...>)
ID(<...>);-->_
ID(<...>);-->ID(ID);
