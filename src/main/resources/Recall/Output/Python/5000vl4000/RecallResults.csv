return test --> return None$1$1$1,0$1,0$0,25$00:00:06,094
if add_constraints: --> if add_constraints and c:$1$1$1,0$1,0$1,0$00:00:13,139
words.arrange_submobjects(DOWN) --> words.arrange(DOWN)$5$5$1,0$1,0$1,0$00:00:11,151
return test --> return None$1$1$1,0$1,0$0,25$00:00:06,094
self.stdscr.clear() --> self.stdscr.erase()$2$2$1,0$1,0$1,0$00:00:07,907
out = feed._handle_response(response) --> feed._handle_response(response)$8$8$1,0$1,0$1,0$00:00:07,127
print_succ('Executed specified command via WMI') --> print_succ('{}:{} Executed command via WMIEXEC'.format(self.__win32Process.get_target(),settings.args.port))$1$1$1,0$1,0$1,0$00:00:07,627
print("Creating table reference") --> print("Creating table [unicode_test] reference")$1$1$1,0$1,0$1,0$00:00:06,792
if tools_paths: --> if tools_paths or tools_env_vars:$1$1$1,0$1,0$1,0$00:00:06,260
matrix.highlight_columns(X_COLOR, Y_COLOR) --> matrix.set_color_columns(X_COLOR, Y_COLOR)$31$31$1,0$1,0$1,0$00:00:07,031
return self._sep_token --> return None$1$1$1,0$1,0$1,0$00:00:08,541
self.blob_write(extra_data) --> self.blob_writer.write(extra_data)$1$1$1,0$1,0$1,0$00:00:08,200
items = rcol.perform_collect() --> rcol.perform_collect()\nitems = rcol.items$5$5$1,0$1,0$1,0$00:00:07,741
exit(0) --> sys.exit(0)$6$6$1,0$1,0$0,5$00:00:06,568
print('Epoch %d' % epoch) --> print('Epoch %d out of %d' % (epoch, self.nb_epoch))$1$1$1,0$1,0$1,0$00:00:09,653
if license_: --> if license_ and show("license"):$1$1$1,0$1,0$1,0$00:00:08,598
if download_mirrors: --> if download_mirrors or conf.settings['download_mirrors']:$1$1$1,0$1,0$1,0$00:00:07,330
model.to_gpu() --> model.to_device(device)$6$6$1,0$1,0$0,3333333333333333$00:00:06,950
pg = p.path_group() --> pg = p.factory.path_group()$2$2$1,0$1,0$1,0$00:00:09,230
outcome = RunExecutor.execute(self) --> outcome = RunExecutor.execute(self, False)$2$2$1,0$1,0$1,0$00:00:08,147
return ID --> return None$107$86$0,8037383177570093$0,8037383177570093$0,015873015873015872$00:00:07,729
if ID: --> if ID and c:$1$1$1,0$1,0$0,25$00:00:06,525
words.ID(DOWN) --> words.ID(DOWN)$5$5$1,0$1,0$0,3333333333333333$00:00:07,230
return test --> return LT$1$1$1,0$1,0$0,005988023952095809$00:00:08,566
self.stdscr.ID() --> self.stdscr.ID()$2$2$1,0$1,0$0,5$00:00:07,685
out = ID<0>._handle_response(response) --> ID<0>._handle_response(response)$8$8$1,0$1,0$1,0$00:00:08,742
ID('Executed specified command via WMI') --> ID('{}:{} Executed command via WMIEXEC'.format(self.__win32Process.get_target(),settings.args.port))$1$1$1,0$1,0$1,0$00:00:06,531
ID("Creating table reference") --> ID("Creating table [unicode_test] reference")$1$1$1,0$1,0$1,0$00:00:06,744
if ID: --> if ID or tools_env_vars:$1$1$1,0$1,0$1,0$00:00:06,994
ID<0>.highlight_columns(X_COLOR, Y_COLOR) --> ID<0>.set_color_columns(X_COLOR, Y_COLOR)$35$35$1,0$1,0$1,0$00:00:07,401
return self.ID --> return None$10$10$1,0$1,0$0,09090909090909091$00:00:06,899
self.blob_write(ID) --> self.blob_writer.write(ID)$2$2$1,0$1,0$1,0$00:00:06,781
items = rcol.ID<0>() --> rcol.ID<0>()\nitems = rcol.items$5$5$1,0$1,0$1,0$00:00:10,080
ID<0>(0) --> sys.ID<0>(0)$6$6$1,0$1,0$1,0$00:00:08,934
ID<0>('Epoch %d' % epoch) --> ID<0>('Epoch %d out of %d' % (epoch, self.nb_epoch))$1$1$1,0$1,0$1,0$00:00:07,318
if ID: --> if ID and show("license"):$1$1$1,0$1,0$1,0$00:00:06,326
if ID<0>: --> if ID<0> or conf.settings['download_mirrors']:$1$1$1,0$1,0$1,0$00:00:07,222
ID<0>.to_gpu() --> ID<0>.to_device(device)$8$8$1,0$1,0$0,3333333333333333$00:00:07,365
pg = p.ID<0>() --> pg = p.factory.ID<0>()$2$2$1,0$1,0$1,0$00:00:07,438
outcome = RunExecutor.ID<0>(self) --> outcome = RunExecutor.ID<0>(self, False)$2$2$1,0$1,0$1,0$00:00:06,577
return ID --> return LT$1972$289$0,14655172413793102$0,14655172413793102$0,05555555555555555$00:00:10,078
if ID: --> if ID and ID:$46$46$1,0$1,0$0,01694915254237288$00:00:08,380
ID.ID(DOWN) --> ID.ID(DOWN)$75$75$1,0$1,0$0,25$00:00:08,254
return ID.ID --> return LT$83$35$0,42168674698795183$0,42168674698795183$0,045454545454545456$00:00:09,742
self.ID.ID() --> self.ID.ID()$735$694$0,9442176870748299$0,9442176870748299$0,125$00:00:06,839
out = ID<0>.ID(response) --> ID<0>.ID(response)$8$8$1,0$1,0$1,0$00:00:09,245
return ID.ID(LT) --> return ID.ID(LT)$677$604$0,8921713441654358$0,8921713441654358$0,25$00:00:09,201
ID.ID.ID(LT) --> ID.ID.ID(LT)$2033$787$0,38711264141662566$0,38711264141662566$0,08333333333333333$00:00:08,292
if ID: --> if ID or ID:$33$33$1,0$1,0$0,1111111111111111$00:00:06,657
ID<0>.ID(X_COLOR, Y_COLOR) --> ID<0>.ID(X_COLOR, Y_COLOR)$74$74$1,0$1,0$1,0$00:00:07,379
return self.ID --> return LT$47$33$0,7021276595744681$0,7021276595744681$0,043478260869565216$00:00:08,432
self.ID(ID) --> self.blob_writer.ID(ID)$2$2$1,0$1,0$0,5$00:00:09,639
items = ID.ID<0>() --> ID.ID<0>()\nitems = rcol.items$5$5$1,0$1,0$1,0$00:00:06,373
ID<0>(0) --> ID.ID<0>(0)$8$8$1,0$1,0$0,043478260869565216$00:00:10,137
ID<0>('Epoch %d' % ID) --> ID<0>('Epoch %d out of %d' % (ID, self.nb_epoch))$1$1$1,0$1,0$1,0$00:00:08,415
if ID: --> if ID and ID("license"):$1$1$1,0$1,0$0,2$00:00:07,741
if ID<0>: --> if ID<0> or ID.settings['download_mirrors']:$1$1$1,0$1,0$1,0$00:00:09,695
ID<0>.to_gpu() --> ID<0>.ID(device)$8$8$1,0$1,0$0,5$00:00:07,538
pg = p.ID<0>() --> pg = p.ID.ID<0>()$2$2$1,0$1,0$1,0$00:00:08,945
outcome = ID.ID<0>(self) --> outcome = ID.ID<0>(self, False)$2$2$1,0$1,0$1,0$00:00:09,803
return EXPR --> return EXPR$28046$4398$0,15681380589032304$0,8796$1,0$00:00:06,217
if EXPR: --> if ID and ID:$47$47$1,0$1,0$0,02857142857142857$00:00:09,904
while EXPR: <...> --> while EXPR: <...>$354$354$1,0$1,0$0,5$00:00:08,563
return ID.ID(<...>) --> return EXPR$6839$2626$0,3839742652434566$0,5252$1,0$00:00:07,747
ID.ID.ID(<...>) --> self.ID.ID()$788$35$0,044416243654822336$0,044416243654822336$0,16666666666666666$00:00:08,132
ID = ID<0>.ID(<...>) --> ID<0>.ID(<...>)$541$196$0,36229205175600737$0,36229205175600737$0,14285714285714285$00:00:08,751
ID.ID(<...>) --> ID.ID()$6809$310$0,04552797767660449$0,062$0,25$00:00:06,485
ID.ID() --> ID.ID(<...>)$7130$516$0,0723702664796634$0,1032$0,05$00:00:07,235
if EXPR: --> if ID or ID:$37$37$1,0$1,0$0,1111111111111111$00:00:07,320
return ID<0>.ID(EXPR) --> return ID<0>.ID(EXPR)$1139$1002$0,8797190517998245$0,8797190517998245$0,3333333333333333$00:00:07,580
return ID --> return ID(<...>)$327$89$0,27217125382262997$0,27217125382262997$0,05263157894736842$00:00:06,862
ID.ID(<...>) --> ID.ID.ID(<...>)$1750$744$0,42514285714285716$0,42514285714285716$0,3333333333333333$00:00:06,666
ID = ID.ID<0>(<...>) --> ID.ID<0>(<...>)$353$158$0,4475920679886686$0,4475920679886686$0,14285714285714285$00:00:06,791
ID<0>(<...>) --> ID.ID<0>(<...>)$625$81$0,1296$0,1296$0,03333333333333333$00:00:06,892
ID<0>(EXPR) --> ID<0>(EXPR % (ID, ID.ID))$326$3$0,009202453987730062$0,009202453987730062$7,304601899196494E-4$00:00:06,761
if ID: --> if ID and ID(EXPR):$7$7$1,0$1,0$0,01639344262295082$00:00:08,979
if ID<0>: --> if ID<0> or EXPR:$48$48$1,0$1,0$0,1111111111111111$00:00:06,604
ID<0>.ID() --> ID<0>.ID(<...>)$6706$449$0,0669549657023561$0,0898$0,05$00:00:09,109
ID = ID.ID<0>(<...>) --> ID = ID.ID.ID<0>(<...>)$1138$797$0,7003514938488576$0,7003514938488576$0,125$00:00:07,735
ID = ID.ID<0>(EXPR) --> ID = ID.ID<0>(EXPR, EXPR)$525$239$0,4552380952380952$0,4552380952380952$0,1$00:00:10,855
