return new MySqlStatementParser(sql); --> return new MySqlStatementParser(sql, keepComments);$2$2$1,0$1,0$1,0$00:00:01,730
_ --> import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleLabelStatement;$5$5$1,0$1,0$1,0$00:00:00,519
for (Invoker minvoker : counter.keySet()) { Long count = counter.get(minvoker).get(); --> for (Map.Entry<Invoker, AtomicLong> entry : counter.entrySet()) { Long count = entry.getValue().get();$6$6$1,0$1,0$1,0$00:00:01,296
} else if (JavaSerializer.getWriteReplace(cl) != null) serializer = new JavaSerializer(cl, _loader); --> } else if (isZoneId(cl))  serializer = ZoneIdSerializer.getInstance(); else if (JavaSerializer.getWriteReplace(cl) != null) serializer = new JavaSerializer(cl, _loader);$26296$0$0,0$0,0$0,0$00:00:00,469
final boolean containsKey(@Nullable Object key) { --> final boolean containsKey(@CheckForNull Object key) {$4205$4$9,512485136741974E-4$9,512485136741974E-4$1,0$00:00:00,347
protected boolean archive = true; --> private boolean archive = true;$366$2$0,00546448087431694$0,00546448087431694$0,002207505518763797$00:00:00,271
Entry<K, V>[] entryArray, --> @Nullable Entry<K, V>[] entryArray,$2$0$0,0$0,0$0,0$00:00:00,280
@GwtIncompatible("TODO") --> @GwtIncompatible // TODO$232$220$0,9482758620689655$0,9482758620689655$1,0$00:00:00,250
_ --> String lastSaveFilename = "", lastSaveBMFilename = "", lastOpenFilename = "";$1$0$0,0$0,0$0,0$00:00:00,222
refid = builderAssistant.applyCurrentNamespace(refid); --> refid = builderAssistant.applyCurrentNamespace(refid, true);$1$0$0,0$0,0$0,0$00:00:00,324
Assert.assertTrue(promise.syncUninterruptibly().getNow() instanceof PortUnreachableException); --> assertTrue(promise.syncUninterruptibly().getNow() instanceof PortUnreachableException);$1$0$0,0$0,0$0,0$00:00:00,401
message.headers().set(HttpHeaderNames.CONTENT_TYPE, "TEXT/HTML; CHARSET=UTF-8"); --> message.headers().set(HttpHeaderNames.CONTENT_TYPE, UPPER_CASE_NORMAL_CONTENT_TYPE);$1$0$0,0$0,0$0,0$00:00:00,328
return buffer.slice(index, length).retain(); --> return buffer.retainedSlice(index, length);$2$0$0,0$0,0$0,0$00:00:00,285
public MockXADataSourceWrapper wrapper() { --> MockXADataSourceWrapper wrapper() {$2$0$0,0$0,0$0,0$00:00:00,229
_ --> @Configuration$500$371$0,742$0,742$1,0$00:00:00,267
_ --> import org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogMetricsExportAutoConfiguration;$1$1$1,0$1,0$1,0$00:00:00,263
ReportScheduler scheduler = new ReportScheduler(metricRegistry, consoleReporter); --> // ä½¿ç”¨slf4j reporter,å¹¶ä½¿ç”¨é»˜è®¤loggeråå­— Slf4jReporter slf4jReporter = new Slf4jReporter(); ReportScheduler scheduler = new ReportScheduler(metricRegistry, slf4jReporter);$1$0$0,0$0,0$0,0$00:00:00,514
lexer.nextToken(); --> lexer.nextToken(JSONToken.COMMA);$2$0$0,0$0,0$0,0$00:00:00,317
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.SpringMVCServerCodegen", date = "2016-04-17T17:50:52.711+08:00") --> @javax.annotation.Generated(value = "class io.swagger.codegen.languages.SpringMVCServerCodegen", date = "2016-04-28T10:36:54.900+02:00")$16$16$1,0$1,0$1,0$00:00:00,394
_ --> this.jedisSocketFactory = new DefaultJedisSocketFactory(hostAndPort, this.clientConfig);$1$0$0,0$0,0$0,0$00:00:00,300
_ --> ID.setRelayLogs(true);$1$1$1,0$1,0$1,0$00:00:00,287
<...> --> ID.incrementAndGet();$48$0$0,0$0,0$0,0$00:00:00,560
import ID.apache.dubbo.common.Constants; --> _$321$321$1,0$1,0$1,0$00:00:00,282
_ --> import static org.hamcrest.MatcherAssert.ID;$142$142$1,0$1,0$1,0$00:00:00,233
EXPR.ID(ID, AuthUtils.SERVICE , "localhost" , null , serer_callback_handler ) ; --> ID.ID(ID, AuthUtils . SERVICE , EXPR , null , server_callback_handler );$1$0$0,0$0,0$0,0$00:00:00,482
reverseColumnsInPlace( sigb . slice ( LT ) ) ; --> if ( rnnDataFormat == EXPR.NCW ) { reverseColumnsInPlace ( EXPR ) ; } else { reverseColumnsInPlace ( EXPR.ID ( LT ).permute ( 1 ,0 ) ) ; }$1$0$0,0$0,0$0,0$00:00:00,641
final ID<ILoggingEvent> ID = new DefaultTimeBasedFileNamingAndTriggeringPolicy<>( ) ; --> final TimeBasedFileNamingAndTriggeringPolicy<ILoggingEvent> triggeringPolicy ; if ( maxFileSize binOP null ) { ID = new DefaultTimeBasedFileNamingAndTriggeringPolicy < > ( ) ; } else { SizeAndTimeBasedFNATP < ILoggingEvent > maxFileSizeTriggeringPolicy = new ID<> ( ) ; maxFileSizeTriggeringPolicy.setMaxFileSize ( EXPR ) ; EXPR = ID ; }$0$0$1,0$NaN$0,0$00:00:00,422
@ Override public boolean remove ( Object o ) { --> @ ID public boolean remove ( ID o ) {$11982$46$0,003839091971290269$0,0092$1,0$00:00:00,244
import ID . google . caliper . Benchmark ; --> _$38$38$1,0$1,0$1,0$00:00:00,225
setContentView(<...>); --> setContentView(R.layout.actionbar_menu);$1$0$0,0$0,0$0,0$00:00:00,286
return getAnimation ( EXPR , LT ) ; --> return getAnimation ( id , false ) ;$1$0$0,0$0,0$0,0$00:00:00,257
ID descriptor ; if ( EXPR ) { ID OP new ID ( resolve ( path ) , TextureAtlas . class , new ID . ID ( ) ) ; } else { TextureLoader . TextureParameter ID = new TextureLoader . TextureParameter ( ) ; --> ID resolved = ID ( path ) ;$1$0$0,0$0,0$0,0$00:00:00,462
rayTestCB . setM_collisionObject ( EXPR ) ; ID . setM_closestHitFraction ( EXPR ) ; ID . ID ( ) . setValue ( rayFrom . x , rayFrom . ID , ID . ID ) ; rayTestCB . getM_rayToWorld ( ) . ID ( rayTo . x , rayTo . y , rayTo . z ) ; --> rayTestCB . setCollisionObject ( EXPR ) ; ID . setClosestHitFraction ( EXPR ) ; ID . getRayFromWorld ( ) . setValue ( rayFrom . ID , rayFrom . y , rayFrom . ID ) ; ID . ID ( ) . ID ( rayTo . x , rayTo . ID , ID . z ) ;$1$0$0,0$0,0$0,0$00:00:00,555
import static org . junit . Assert . assertArrayEquals ; import static org . ID . Assert . assertEquals ; import static org . ID . ID . ID ; import static ID . ID . ID . ID ; import static org . junit . Assert . ID ; import static org . junit . ID . ID ; import static ID . junit . Assert . fail ; import static org . junit . Assume . ID ; import static org . junit . ID . assumeTrue ; --> import static org . junit . jupiter . api . Assertions . ID ; import static org . ID . jupiter . api . ID . ID ; import static ID . ID . jupiter . ID . Assertions . assertFalse ; import static ID . junit . ID . api . ID . assertNull ; import static org . junit . ID . api . Assertions . ID ; import static ID . junit . jupiter . api . Assertions . ID ; import static org . junit . jupiter . api . Assertions . assertTrue ; import static org . junit . jupiter . api . Assertions . fail ; import static ID . junit . jupiter . api . ID . assumeFalse ; import static ID . ID . jupiter . ID . Assumptions . assumeTrue ;$14$2$0,14285714285714285$0,14285714285714285$0,016666666666666666$00:00:00,286
ChannelFuture ID = ID . connect ( new InetSocketAddress ( host , ID ) ) ; --> ChannelFuture f = ID . connect ( ) . sync ( ) ;$2$0$0,0$0,0$0,0$00:00:00,336
extension.ID ( <...> ) ; --> EXPR.getMainClass ( ) . ID ( "com.example.SpringBootExtensionMainClass" ) ;$1$0$0,0$0,0$0,0$00:00:00,295
private String ID = null ; --> private UUID uuid = LT ;$26104$314$0,012028807845540914$0,0628$1,0$00:00:00,239
ID . ID (<...>) ; --> typeMapping . put(<...>) ;$57$57$1,0$1,0$1,0$00:00:00,278
import com . ID . zxing . ID ; import com . google . zxing . MonochromeBitmapSource ; import com . google . zxing . ID ; import com . google . ID . common . BitArray ; import com . google . zxing . ID . ID ; --> import com . google . zxing . common . BaseMonochromeBitmapSource ;$3$0$0,0$0,0$0,0$00:00:00,251
private File ID ; --> private final ID ID ;$26104$4727$0,1810833588722035$0,9454$1,0$00:00:00,268
import java . util . ID ; --> _$5916$412$0,06964164976335362$0,0824$1,0$00:00:00,227
_ --> import com . alibaba . druid . ID . ID . ID . ID . ID . ID ;$900$523$0,5811111111111111$0,5811111111111111$1,0$00:00:00,692
<...> --> EXPR OP ID ( ID ) ;$339$0$0,0$0,0$0,0$00:00:01,964
ID ID = new TraceAfterEvent ( EXPR , new ID ( startMillis ) , EXPR ) ; --> ID event = <...> ;$40$0$0,0$0,0$0,0$00:00:00,382
String ID = ID . ID ( EXPR ) ; --> { ID ID = SQLUtils . ID ( stmt ) ;$2$0$0,0$0,0$0,0$00:00:00,217
_ --> ID ID = LT , ID = "" , ID = LT ;$1$1$1,0$1,0$1,0$00:00:00,221
Integer flag = ID.ID( ID[LT]) ; ID ID = <...>; ID ID = ID . ID ( ID[LT] ) ; --> <...>$2$0$0,0$0,0$0,0$00:00:00,245
ID . ID ( new ID ( EXPR , ID . array ( ) ) ) ; --> EXPR . add ( new ID ( ID , payload . ID ( ) ) ) ;$1$0$0,0$0,0$0,0$00:00:00,318
_ --> public void dispose ( ) {  }$14566$345$0,023685294521488397$0,069$1,0$00:00:00,211
import ID . nd4j . ID . ID ; --> _$109$0$0,0$0,0$0,0$00:00:00,204
public void urlsCanBeRetrieved ( ) { --> void ID ( ) {$9390$71$0,007561235356762513$0,0142$1,0$00:00:00,252
ID . ID ( ssl , ID ) ; --> _$3$0$0,0$0,0$0,0$00:00:00,273
import static ID . google . ID . ID . BstSide . LEFT ; import static ID . google . ID . ID . ID . RIGHT ; --> _$3$3$1,0$1,0$1,0$00:00:00,211
private static boolean ID ( Iterable<?> ID , Iterable<?> iterable2 ) { ID<?> ID = ID . iterator ( ) ; ID<?> ID = iterable2 . ID ( ) ; while ( iterator1 . ID ( ) ) { if ( ! ID . ID ( ) ) { return LT ; } if ( <...> ) { return false ; } } return EXPR ; } --> _$5958$1$1,6784155756965425E-4$2,0E-4$0,5$00:00:00,260
EXPR . ID ( ID ) ; --> <...> ;$6602$0$0,0$0,0$0,0$00:00:00,264
_ --> ID . ID . ID ( LT , EXPR , EXPR , LT ) ;$17$17$1,0$1,0$1,0$00:00:00,325
return EXPR ; --> <...>$9375$435$0,0464$0,087$1,0$00:00:00,238
_ --> protected String toString ( ID ID ) { return EXPR . ID ( ) ; }$2076$94$0,04527938342967245$0,04527938342967245$1,0$00:00:00,236
ID ( EXPR binOP ( <...> ) + LT binOP ID , ID , EXPR[ ID ] ) ; --> assertThat ( EXPR ) . isEqualTo ( EXPR ) . as ( EXPR binOP ID binOP LT + EXPR ) ;$1$0$0,0$0,0$0,0$00:00:00,462
import java.ID.ID ; --> _$9191$412$0,044826460668044826$0,0824$1,0$00:00:00,222
EXPR ; --> _$3298$0$0,0$0,0$0,0$00:00:00,249
this . ID ( ) . ID ( ID . ID ( ) ) ; --> ID ( ID . ID ( ) ) ;$1$0$0,0$0,0$0,0$00:00:00,295
_ --> import java . ID . ID ;$14939$4651$0,31133275319633175$0,9302$1,0$00:00:00,285
if ( ID.ID() binOP <...> ) { --> if (<...> binOP ID.ID ) {$355$293$0,8253521126760563$0,8253521126760563$0,3333333333333333$00:00:00,348
ID . ID ( LT , EXPR ) ; --> ID ( EXPR , ID ) ;$83$0$0,0$0,0$0,0$00:00:00,275
throw new ID ( EXPR binOP graphType ) ; --> <...>$6$0$0,0$0,0$0,0$00:00:00,230
_ --> @ID$34892$58$0,0016622721540754328$0,0116$1,0$00:00:00,224
@ID protected void ID ( ) { --> void ID ( ) {$16$0$0,0$0,0$0,0$00:00:00,236
return EXPR ; --> return ID ( EXPR ) ;$1085$11$0,010138248847926268$0,010138248847926268$1,0$00:00:00,241
if (<...>) ID.ID (<...>) ; --> if ( ID.DEBUG ) ID.ID( EXPR, LT binOP title ) ;$4$4$1,0$1,0$1,0$00:00:00,310
if ( EXPR ) return LT ; --> if ( ID binOP ID . ID ) return LT ;$6$4$0,6666666666666666$0,6666666666666666$0,5$00:00:00,296
EXPR --> ID.ID.ID(LT, LT, LT, LT);$19$0$0,0$0,0$0,0$00:00:00,923
public class ID { --> class ID {$1749$1749$1,0$1,0$1,0$00:00:00,199
if ( <...> ) { --> if ( <...> binOP ID ) {$1044$0$0,0$0,0$0,0$00:00:00,284
ID.ID(EXPR); EXPR; EXPR; --> EXPR$12$0$0,0$0,0$0,0$00:00:00,298
package ID . ID . ID . context . ID ; --> package ID . ID . ID . ID . ID . embedded ;$33$33$1,0$1,0$0,3333333333333333$00:00:00,662
import ID . ID . ID . test . ID . ID ; --> import ID . ID . ID . ID . ID . ID ;$679$0$0,0$0,0$0,0$00:00:00,208
<...> --> public ID getInvokerPackage ( ) { return ID ; }$3227$12$0,0037186241090796405$0,0037186241090796405$0,01818181818181818$00:00:00,241
_ --> public ID ID ( ID key , ID < ID , ID > ID ) { <...> . ID ( EXPR , ID ) ; return this ; }$14566$218$0,014966360016476726$0,0436$1,0$00:00:00,249
EXPR --> cliOptions.ID(<...>);$52$3$0,057692307692307696$0,057692307692307696$0,05263157894736842$00:00:00,372
