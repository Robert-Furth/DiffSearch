return new MySqlStatementParser(sql); --> return new MySqlStatementParser(sql, keepComments);$2$2$1,0$1,0$1,0$00:00:05,235
_ --> import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleLabelStatement;$5$5$1,0$1,0$1,0$00:00:03,189
for (Invoker minvoker : counter.keySet()) { Long count = counter.get(minvoker).get(); --> for (Map.Entry<Invoker, AtomicLong> entry : counter.entrySet()) { Long count = entry.getValue().get();$6$6$1,0$1,0$1,0$00:00:05,391
if (closed) { -->  if (closed || closing) {$1$1$1,0$1,0$1,0$00:00:02,152
final boolean containsKey(@Nullable Object key) { --> final boolean containsKey(@CheckForNull Object key) {$4205$26$0,006183115338882283$0,006183115338882283$1,0$00:00:01,741
protected boolean archive = true; --> private boolean archive = true;$366$61$0,16666666666666666$0,16666666666666666$1,0$00:00:02,192
Entry<K, V>[] entryArray, --> @Nullable Entry<K, V>[] entryArray,$2$2$1,0$1,0$1,0$00:00:03,023
@GwtIncompatible("TODO") --> @GwtIncompatible // TODO$232$224$0,9655172413793104$0,9655172413793104$1,0$00:00:02,335
_ --> String lastSaveFilename = "", lastSaveBMFilename = "", lastOpenFilename = "";$1$1$1,0$1,0$1,0$00:00:02,766
refid = builderAssistant.applyCurrentNamespace(refid); --> refid = builderAssistant.applyCurrentNamespace(refid, true);$1$1$1,0$1,0$1,0$00:00:03,140
Assert.assertTrue(promise.syncUninterruptibly().getNow() instanceof PortUnreachableException); --> assertTrue(promise.syncUninterruptibly().getNow() instanceof PortUnreachableException);$1$1$1,0$1,0$1,0$00:00:03,899
message.headers().set(HttpHeaderNames.CONTENT_TYPE, "TEXT/HTML; CHARSET=UTF-8"); --> message.headers().set(HttpHeaderNames.CONTENT_TYPE, UPPER_CASE_NORMAL_CONTENT_TYPE);$1$1$1,0$1,0$1,0$00:00:03,463
return buffer.slice(index, length).retain(); --> return buffer.retainedSlice(index, length);$2$2$1,0$1,0$1,0$00:00:02,690
public MockXADataSourceWrapper wrapper() { --> MockXADataSourceWrapper wrapper() {$2$2$1,0$1,0$1,0$00:00:01,795
_ --> @Configuration$500$495$0,99$0,99$1,0$00:00:01,820
_ --> import org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogMetricsExportAutoConfiguration;$1$1$1,0$1,0$1,0$00:00:02,066
ReportScheduler scheduler = new ReportScheduler(metricRegistry, consoleReporter); --> // ä½¿ç”¨slf4j reporter,å¹¶ä½¿ç”¨é»˜è®¤loggeråå­— Slf4jReporter slf4jReporter = new Slf4jReporter(); ReportScheduler scheduler = new ReportScheduler(metricRegistry, slf4jReporter);$1$1$1,0$1,0$1,0$00:00:02,305
lexer.nextToken(); --> lexer.nextToken(JSONToken.COMMA);$2$2$1,0$1,0$1,0$00:00:02,656
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.SpringMVCServerCodegen", date = "2016-04-17T17:50:52.711+08:00") --> @javax.annotation.Generated(value = "class io.swagger.codegen.languages.SpringMVCServerCodegen", date = "2016-04-28T10:36:54.900+02:00")$16$16$1,0$1,0$1,0$00:00:02,575
_ --> this.jedisSocketFactory = new DefaultJedisSocketFactory(hostAndPort, this.clientConfig);$1$1$1,0$1,0$1,0$00:00:02,468
_ --> ID.setRelayLogs(true);$1$1$1,0$1,0$1,0$00:00:02,059
<...> --> ID.incrementAndGet();$48$42$0,875$0,875$0,14285714285714285$00:00:05,092
import ID.apache.dubbo.common.Constants; --> _$321$321$1,0$1,0$1,0$00:00:01,640
_ --> import static org.hamcrest.MatcherAssert.ID;$142$142$1,0$1,0$1,0$00:00:01,747
EXPR.ID(ID, AuthUtils.SERVICE , "localhost" , null , serer_callback_handler ) ; --> ID.ID(ID, AuthUtils . SERVICE , EXPR , null , server_callback_handler );$1$1$1,0$1,0$1,0$00:00:03,841
reverseColumnsInPlace( sigb . slice ( LT ) ) ; --> if ( rnnDataFormat == EXPR.NCW ) { reverseColumnsInPlace ( EXPR ) ; } else { reverseColumnsInPlace ( EXPR.ID ( LT ).permute ( 1 ,0 ) ) ; }$1$1$1,0$1,0$1,0$00:00:04,764
if (ID<0>) { --> if (ID<0> || needsFirstHandshake) {$2$2$1,0$1,0$1,0$00:00:02,251
@ Override public boolean remove ( Object o ) { --> @ ID public boolean remove ( ID o ) {$11982$518$0,043231513937573025$0,1036$1,0$00:00:01,761
import ID . google . caliper . Benchmark ; --> _$38$38$1,0$1,0$1,0$00:00:01,819
setContentView(<...>); --> setContentView(R.layout.actionbar_menu);$1$1$1,0$1,0$1,0$00:00:02,337
return getAnimation ( EXPR , LT ) ; --> return getAnimation ( id , false ) ;$1$1$1,0$1,0$1,0$00:00:02,766
ID descriptor ; if ( EXPR ) { ID OP new ID ( resolve ( path ) , TextureAtlas . class , new ID . ID ( ) ) ; } else { TextureLoader . TextureParameter ID = new TextureLoader . TextureParameter ( ) ; --> ID resolved = ID ( path ) ;$1$1$1,0$1,0$1,0$00:00:05,615
rayTestCB . setM_collisionObject ( EXPR ) ; ID . setM_closestHitFraction ( EXPR ) ; ID . ID ( ) . setValue ( rayFrom . x , rayFrom . ID , ID . ID ) ; rayTestCB . getM_rayToWorld ( ) . ID ( rayTo . x , rayTo . y , rayTo . z ) ; --> rayTestCB . setCollisionObject ( EXPR ) ; ID . setClosestHitFraction ( EXPR ) ; ID . getRayFromWorld ( ) . setValue ( rayFrom . ID , rayFrom . y , rayFrom . ID ) ; ID . ID ( ) . ID ( rayTo . x , rayTo . ID , ID . z ) ;$1$1$1,0$1,0$1,0$00:00:05,677
import static org . junit . Assert . assertArrayEquals ; import static org . ID . Assert . assertEquals ; import static org . ID . ID . ID ; import static ID . ID . ID . ID ; import static org . junit . Assert . ID ; import static org . junit . ID . ID ; import static ID . junit . Assert . fail ; import static org . junit . Assume . ID ; import static org . junit . ID . assumeTrue ; --> import static org . junit . jupiter . api . Assertions . ID ; import static org . ID . jupiter . api . ID . ID ; import static ID . ID . jupiter . ID . Assertions . assertFalse ; import static ID . junit . ID . api . ID . assertNull ; import static org . junit . ID . api . Assertions . ID ; import static ID . junit . jupiter . api . Assertions . ID ; import static org . junit . jupiter . api . Assertions . assertTrue ; import static org . junit . jupiter . api . Assertions . fail ; import static ID . junit . jupiter . api . ID . assumeFalse ; import static ID . ID . jupiter . ID . Assumptions . assumeTrue ;$14$14$1,0$1,0$0,017543859649122806$00:00:02,182
ChannelFuture ID = ID . connect ( new InetSocketAddress ( host , ID ) ) ; --> ChannelFuture f = ID . connect ( ) . sync ( ) ;$2$1$0,5$0,5$1,0$00:00:02,965
extension.ID ( <...> ) ; --> EXPR.getMainClass ( ) . ID ( "com.example.SpringBootExtensionMainClass" ) ;$1$1$1,0$1,0$1,0$00:00:02,667
private String ID = null ; --> private UUID uuid = LT ;$26104$2835$0,1086040453570334$0,567$1,0$00:00:01,831
ID . ID (<...>) ; --> typeMapping . put(<...>) ;$57$57$1,0$1,0$1,0$00:00:02,361
import com . ID . zxing . ID ; import com . google . zxing . MonochromeBitmapSource ; import com . google . zxing . ID ; import com . google . ID . common . BitArray ; import com . google . zxing . ID . ID ; --> import com . google . zxing . common . BaseMonochromeBitmapSource ;$3$3$1,0$1,0$0,003246753246753247$00:00:02,061
private File ID ; --> private final ID ID ;$26104$4640$0,17775053631627336$0,928$1,0$00:00:01,807
import java . util . ID ; --> _$5916$3975$0,6719066937119675$0,795$1,0$00:00:01,756
_ --> import com . alibaba . druid . ID . ID . ID . ID . ID . ID ;$900$900$1,0$1,0$0,045454545454545456$00:00:03,637
<...> --> EXPR OP ID ( ID ) ;$339$324$0,9557522123893806$0,9557522123893806$0,16666666666666666$00:00:04,999
if (ID) { --> if (EXPR) {$528$498$0,9431818181818182$0,9431818181818182$1,0$00:00:01,535
String ID = ID . ID ( EXPR ) ; --> { ID ID = SQLUtils . ID ( stmt ) ;$2$2$1,0$1,0$1,0$00:00:02,413
_ --> ID ID = LT , ID = "" , ID = LT ;$1$1$1,0$1,0$1,0$00:00:01,776
Integer flag = ID.ID( ID[LT]) ; ID ID = <...>; ID ID = ID . ID ( ID[LT] ) ; --> <...>$2$2$1,0$1,0$1,0$00:00:03,574
ID . ID ( new ID ( EXPR , ID . array ( ) ) ) ; --> EXPR . add ( new ID ( ID , payload . ID ( ) ) ) ;$1$1$1,0$1,0$1,0$00:00:02,922
_ --> public void dispose ( ) {  }$14566$4480$0,30756556364135657$0,896$1,0$00:00:01,585
import ID . nd4j . ID . ID ; --> _$109$80$0,7339449541284404$0,7339449541284404$1,0$00:00:01,676
public void urlsCanBeRetrieved ( ) { --> void ID ( ) {$9390$5000$0,5324813631522897$1,0$1,0$00:00:01,711
ID . ID ( ssl , ID ) ; --> _$3$3$1,0$1,0$1,0$00:00:01,935
import static ID . google . ID . ID . BstSide . LEFT ; import static ID . google . ID . ID . ID . RIGHT ; --> _$3$3$1,0$1,0$1,0$00:00:01,679
private static boolean ID ( Iterable<?> ID , Iterable<?> iterable2 ) { ID<?> ID = ID . iterator ( ) ; ID<?> ID = iterable2 . ID ( ) ; while ( iterator1 . ID ( ) ) { if ( ! ID . ID ( ) ) { return LT ; } if ( <...> ) { return false ; } } return EXPR ; } --> _$5958$790$0,13259483048002685$0,158$1,0$00:00:01,803
EXPR . ID ( ID ) ; --> <...> ;$6602$3701$0,5605877006967586$0,7402$1,0$00:00:02,012
_ --> ID . ID . ID ( LT , EXPR , EXPR , LT ) ;$17$17$1,0$1,0$1,0$00:00:01,828
return EXPR ; --> <...>$9375$3358$0,35818666666666665$0,6716$1,0$00:00:01,766
_ --> protected String toString ( ID ID ) { return EXPR . ID ( ) ; }$2076$293$0,14113680154142583$0,14113680154142583$1,0$00:00:01,553
if (EXPR) { --> if (ID || ID) {$20$19$0,95$0,95$1,0$00:00:01,807
import java.ID.ID ; --> _$9191$5000$0,544010445000544$1,0$1,0$00:00:01,645
EXPR ; --> _$3298$1360$0,41237113402061853$0,41237113402061853$1,0$00:00:01,562
this . ID ( ) . ID ( ID . ID ( ) ) ; --> ID ( ID . ID ( ) ) ;$1$1$1,0$1,0$0,012195121951219513$00:00:02,330
_ --> import java . ID . ID ;$14939$5000$0,33469442399089633$1,0$1,0$00:00:01,656
if ( ID.ID() binOP <...> ) { --> if (<...> binOP ID.ID ) {$355$350$0,9859154929577465$0,9859154929577465$0,3333333333333333$00:00:02,729
ID . ID ( LT , EXPR ) ; --> ID ( EXPR , ID ) ;$83$83$1,0$1,0$1,0$00:00:02,171
throw new ID ( EXPR binOP graphType ) ; --> <...>$6$6$1,0$1,0$0,5$00:00:02,083
ID(EXPR); ID(EXPR); --> ID(EXPR); ID(EXPR);$301$222$0,7375415282392026$0,7375415282392026$0,5$00:00:09,044
return ID; --> return LT;$113$107$0,9469026548672567$0,9469026548672567$1,0$00:00:01,779
return EXPR ; --> return ID ( EXPR ) ;$1085$876$0,8073732718894009$0,8073732718894009$1,0$00:00:01,972
if (<...>) ID.ID (<...>) ; --> if ( ID.DEBUG ) ID.ID( EXPR, LT binOP title ) ;$4$4$1,0$1,0$1,0$00:00:03,326
if ( EXPR ) return LT ; --> if ( ID binOP ID . ID ) return LT ;$6$4$0,6666666666666666$0,6666666666666666$1,0$00:00:03,047
EXPR --> ID.ID.ID(LT, LT, LT, LT);$19$19$1,0$1,0$0,08333333333333333$00:00:05,435
public class ID { --> class ID {$1749$1749$1,0$1,0$1,0$00:00:01,590
if ( <...> ) { --> if ( <...> binOP ID ) {$1044$705$0,6752873563218391$0,6752873563218391$0,5$00:00:02,100
ID.ID(EXPR); EXPR; EXPR; --> EXPR$12$10$0,8333333333333334$0,8333333333333334$0,07692307692307693$00:00:07,307
package ID . ID . ID . context . ID ; --> package ID . ID . ID . ID . ID . embedded ;$33$33$1,0$1,0$0,3333333333333333$00:00:02,224
import ID . ID . ID . test . ID . ID ; --> import ID . ID . ID . ID . ID . ID ;$679$520$0,7658321060382917$0,7658321060382917$0,006097560975609756$00:00:03,800
<...> --> public ID getInvokerPackage ( ) { return ID ; }$3227$90$0,027889680818097305$0,027889680818097305$0,014925373134328358$00:00:01,734
_ --> public ID ID ( ID key , ID < ID , ID > ID ) { <...> . ID ( EXPR , ID ) ; return this ; }$14566$2579$0,17705615817657558$0,5158$1,0$00:00:01,626
EXPR --> cliOptions.ID(<...>);$52$29$0,5576923076923077$0,5576923076923077$0,02857142857142857$00:00:03,210
