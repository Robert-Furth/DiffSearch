return new MySqlStatementParser(sql); --> return new MySqlStatementParser(sql, keepComments);$0$0$1,0$NaN$0,0$00:00:06,483
_ --> import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleLabelStatement;$0$0$1,0$NaN$0,0$00:00:05,799
for (Invoker minvoker : counter.keySet()) { Long count = counter.get(minvoker).get(); --> for (Map.Entry<Invoker, AtomicLong> entry : counter.entrySet()) { Long count = entry.getValue().get();$0$0$1,0$NaN$0,0$00:00:05,059
private List<RequestMatcher> getDelegateMatchers( ServerProperties serverProperties) { --> private List<RequestMatcher> getDelegateMatchers( WebMvcProperties serverProperties) {$0$0$1,0$NaN$0,0$00:00:06,100
final boolean containsKey(@Nullable Object key) { --> final boolean containsKey(@CheckForNull Object key) {$0$0$1,0$NaN$0,0$00:00:05,855
protected boolean archive = true; --> private boolean archive = true;$0$0$1,0$NaN$0,0$00:00:04,385
Entry<K, V>[] entryArray, --> @Nullable Entry<K, V>[] entryArray,$0$0$1,0$NaN$0,0$00:00:05,710
@GwtIncompatible("TODO") --> @GwtIncompatible // TODO$0$0$1,0$NaN$0,0$00:00:04,779
_ --> String lastSaveFilename = "", lastSaveBMFilename = "", lastOpenFilename = "";$0$0$1,0$NaN$0,0$00:00:03,408
refid = builderAssistant.applyCurrentNamespace(refid); --> refid = builderAssistant.applyCurrentNamespace(refid, true);$0$0$1,0$NaN$0,0$00:00:03,642
Assert.assertTrue(promise.syncUninterruptibly().getNow() instanceof PortUnreachableException); --> assertTrue(promise.syncUninterruptibly().getNow() instanceof PortUnreachableException);$0$0$1,0$NaN$0,0$00:00:03,851
message.headers().set(HttpHeaderNames.CONTENT_TYPE, "TEXT/HTML; CHARSET=UTF-8"); --> message.headers().set(HttpHeaderNames.CONTENT_TYPE, UPPER_CASE_NORMAL_CONTENT_TYPE);$0$0$1,0$NaN$0,0$00:00:03,731
return buffer.slice(index, length).retain(); --> return buffer.retainedSlice(index, length);$0$0$1,0$NaN$0,0$00:00:04,004
public MockXADataSourceWrapper wrapper() { --> MockXADataSourceWrapper wrapper() {$0$0$1,0$NaN$0,0$00:00:04,984
_ --> @Configuration$0$0$1,0$NaN$0,0$00:00:04,460
_ --> import org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogMetricsExportAutoConfiguration;$0$0$1,0$NaN$0,0$00:00:03,548
ReportScheduler scheduler = new ReportScheduler(metricRegistry, consoleReporter); --> // 使用slf4j reporter,并使用默认logger名字 Slf4jReporter slf4jReporter = new Slf4jReporter(); ReportScheduler scheduler = new ReportScheduler(metricRegistry, slf4jReporter);$0$0$1,0$NaN$0,0$00:00:05,841
lexer.nextToken(); --> lexer.nextToken(JSONToken.COMMA);$0$0$1,0$NaN$0,0$00:00:03,617
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.SpringMVCServerCodegen", date = "2016-04-17T17:50:52.711+08:00") --> @javax.annotation.Generated(value = "class io.swagger.codegen.languages.SpringMVCServerCodegen", date = "2016-04-28T10:36:54.900+02:00")$0$0$1,0$NaN$0,0$00:00:04,691
_ --> this.jedisSocketFactory = new DefaultJedisSocketFactory(hostAndPort, this.clientConfig);$0$0$1,0$NaN$0,0$00:00:03,484
_ --> ID.setRelayLogs(true);$0$0$1,0$NaN$0,0$00:00:04,535
<...> --> ID.incrementAndGet();$0$0$1,0$NaN$0,0$00:00:03,360
import ID.apache.dubbo.common.Constants; --> _$0$0$1,0$NaN$0,0$00:00:05,786
_ --> import static org.hamcrest.MatcherAssert.ID;$0$0$1,0$NaN$0,0$00:00:04,402
EXPR.ID(ID, AuthUtils.SERVICE , "localhost" , null , serer_callback_handler ) ; --> ID.ID(ID, AuthUtils . SERVICE , EXPR , null , server_callback_handler );$0$0$1,0$NaN$0,0$00:00:05,073
reverseColumnsInPlace( sigb . slice ( LT ) ) ; --> if ( rnnDataFormat == EXPR.NCW ) { reverseColumnsInPlace ( EXPR ) ; } else { reverseColumnsInPlace ( EXPR.ID ( LT ).permute ( 1 ,0 ) ) ; }$0$0$1,0$NaN$0,0$00:00:03,839
ID . assertEquals ( EXPR , ID . getId ( ) ) ; --> Assertions . ID (<...> ) ;$0$0$1,0$NaN$0,0$00:00:04,115
@ Override public boolean remove ( Object o ) { --> @ ID public boolean remove ( ID o ) {$0$0$1,0$NaN$0,0$00:00:04,277
import ID . google . caliper . Benchmark ; --> _$0$0$1,0$NaN$0,0$00:00:05,712
setContentView(<...>); --> setContentView(R.layout.actionbar_menu);$0$0$1,0$NaN$0,0$00:00:04,815
return getAnimation ( EXPR , LT ) ; --> return getAnimation ( id , false ) ;$0$0$1,0$NaN$0,0$00:00:03,071
ID descriptor ; if ( EXPR ) { ID OP new ID ( resolve ( path ) , TextureAtlas . class , new ID . ID ( ) ) ; } else { TextureLoader . TextureParameter ID = new TextureLoader . TextureParameter ( ) ; --> ID resolved = ID ( path ) ;$0$0$1,0$NaN$0,0$00:00:04,840
rayTestCB . setM_collisionObject ( EXPR ) ; ID . setM_closestHitFraction ( EXPR ) ; ID . ID ( ) . setValue ( rayFrom . x , rayFrom . ID , ID . ID ) ; rayTestCB . getM_rayToWorld ( ) . ID ( rayTo . x , rayTo . y , rayTo . z ) ; --> rayTestCB . setCollisionObject ( EXPR ) ; ID . setClosestHitFraction ( EXPR ) ; ID . getRayFromWorld ( ) . setValue ( rayFrom . ID , rayFrom . y , rayFrom . ID ) ; ID . ID ( ) . ID ( rayTo . x , rayTo . ID , ID . z ) ;$0$0$1,0$NaN$0,0$00:00:05,781
import static org . junit . Assert . assertArrayEquals ; import static org . ID . Assert . assertEquals ; import static org . ID . ID . ID ; import static ID . ID . ID . ID ; import static org . junit . Assert . ID ; import static org . junit . ID . ID ; import static ID . junit . Assert . fail ; import static org . junit . Assume . ID ; import static org . junit . ID . assumeTrue ; --> import static org . junit . jupiter . api . Assertions . ID ; import static org . ID . jupiter . api . ID . ID ; import static ID . ID . jupiter . ID . Assertions . assertFalse ; import static ID . junit . ID . api . ID . assertNull ; import static org . junit . ID . api . Assertions . ID ; import static ID . junit . jupiter . api . Assertions . ID ; import static org . junit . jupiter . api . Assertions . assertTrue ; import static org . junit . jupiter . api . Assertions . fail ; import static ID . junit . jupiter . api . ID . assumeFalse ; import static ID . ID . jupiter . ID . Assumptions . assumeTrue ;$0$0$1,0$NaN$0,0$00:00:04,333
ChannelFuture ID = ID . connect ( new InetSocketAddress ( host , ID ) ) ; --> ChannelFuture f = ID . connect ( ) . sync ( ) ;$0$0$1,0$NaN$0,0$00:00:04,784
extension.ID ( <...> ) ; --> EXPR.getMainClass ( ) . ID ( "com.example.SpringBootExtensionMainClass" ) ;$0$0$1,0$NaN$0,0$00:00:03,144
private String ID = null ; --> private UUID uuid = LT ;$0$0$1,0$NaN$0,0$00:00:05,636
ID . ID (<...>) ; --> typeMapping . put(<...>) ;$0$0$1,0$NaN$0,0$00:00:04,903
import com . ID . zxing . ID ; import com . google . zxing . MonochromeBitmapSource ; import com . google . zxing . ID ; import com . google . ID . common . BitArray ; import com . google . zxing . ID . ID ; --> import com . google . zxing . common . BaseMonochromeBitmapSource ;$0$0$1,0$NaN$0,0$00:00:05,772
private File ID ; --> private final ID ID ;$0$0$1,0$NaN$0,0$00:00:04,466
import java . util . ID ; --> _$0$0$1,0$NaN$0,0$00:00:05,680
_ --> import com . alibaba . druid . ID . ID . ID . ID . ID . ID ;$0$0$1,0$NaN$0,0$00:00:03,149
<...> --> EXPR OP ID ( ID ) ;$843$15$0,017793594306049824$0,017793594306049824$0,027777777777777776$00:00:04,106
ID ID = new TraceAfterEvent ( EXPR , new ID ( startMillis ) , EXPR ) ; --> ID event = <...> ;$0$0$1,0$NaN$0,0$00:00:03,555
String ID = ID . ID ( EXPR ) ; --> { ID ID = SQLUtils . ID ( stmt ) ;$0$0$1,0$NaN$0,0$00:00:03,697
_ --> ID ID = LT , ID = "" , ID = LT ;$0$0$1,0$NaN$0,0$00:00:03,284
Integer flag = ID.ID( ID[LT]) ; ID ID = <...>; ID ID = ID . ID ( ID[LT] ) ; --> <...>$0$0$1,0$NaN$0,0$00:00:04,684
ID . ID ( new ID ( EXPR , ID . array ( ) ) ) ; --> EXPR . add ( new ID ( ID , payload . ID ( ) ) ) ;$0$0$1,0$NaN$0,0$00:00:03,294
_ --> public void dispose ( ) {  }$9$0$0,0$0,0$0,0$00:00:04,379
import ID . nd4j . ID . ID ; --> _$0$0$1,0$NaN$0,0$00:00:06,069
public void urlsCanBeRetrieved ( ) { --> void ID ( ) {$0$0$1,0$NaN$0,0$00:00:05,738
ID . ID ( ssl , ID ) ; --> _$0$0$1,0$NaN$0,0$00:00:04,962
import static ID . google . ID . ID . BstSide . LEFT ; import static ID . google . ID . ID . ID . RIGHT ; --> _$0$0$1,0$NaN$0,0$00:00:05,372
private static boolean ID ( Iterable<?> ID , Iterable<?> iterable2 ) { ID<?> ID = ID . iterator ( ) ; ID<?> ID = iterable2 . ID ( ) ; while ( iterator1 . ID ( ) ) { if ( ! ID . ID ( ) ) { return LT ; } if ( <...> ) { return false ; } } return EXPR ; } --> _$0$0$1,0$NaN$0,0$00:00:04,534
EXPR . ID ( ID ) ; --> <...> ;$483$6$0,012422360248447204$0,012422360248447204$0,004032258064516129$00:00:04,810
_ --> ID . ID . ID ( LT , EXPR , EXPR , LT ) ;$2$0$0,0$0,0$0,0$00:00:03,158
return EXPR ; --> <...>$4200$107$0,025476190476190475$0,025476190476190475$1,0$00:00:04,315
_ --> protected String toString ( ID ID ) { return EXPR . ID ( ) ; }$0$0$1,0$NaN$0,0$00:00:04,719
ID ( EXPR binOP ( <...> ) + LT binOP ID , ID , EXPR[ ID ] ) ; --> assertThat ( EXPR ) . isEqualTo ( EXPR ) . as ( EXPR binOP ID binOP LT + EXPR ) ;$0$0$1,0$NaN$0,0$00:00:05,058
import java.ID.ID ; --> _$0$0$1,0$NaN$0,0$00:00:05,687
EXPR ; --> _$866$2$0,0023094688221709007$0,0023094688221709007$0,002631578947368421$00:00:03,284
this . ID ( ) . ID ( ID . ID ( ) ) ; --> ID ( ID . ID ( ) ) ;$0$0$1,0$NaN$0,0$00:00:05,084
_ --> import java . ID . ID ;$0$0$1,0$NaN$0,0$00:00:02,969
if ( ID.ID() binOP <...> ) { --> if (<...> binOP ID.ID ) {$0$0$1,0$NaN$0,0$00:00:05,931
ID . ID ( LT , EXPR ) ; --> ID ( EXPR , ID ) ;$26$0$0,0$0,0$0,0$00:00:03,685
throw new ID ( EXPR binOP graphType ) ; --> <...>$0$0$1,0$NaN$0,0$00:00:04,794
_ --> @ID$0$0$1,0$NaN$0,0$00:00:03,273
@ID protected void ID ( ) { --> void ID ( ) {$0$0$1,0$NaN$0,0$00:00:06,035
return EXPR ; --> return ID ( EXPR ) ;$95$8$0,08421052631578947$0,08421052631578947$0,00141643059490085$00:00:04,792
if (<...>) ID.ID (<...>) ; --> if ( ID.DEBUG ) ID.ID( EXPR, LT binOP title ) ;$0$0$1,0$NaN$0,0$00:00:03,442
if ( EXPR ) return LT ; --> if ( ID binOP ID . ID ) return LT ;$2$0$0,0$0,0$0,0$00:00:03,271
EXPR --> ID.ID.ID(LT, LT, LT, LT);$0$0$1,0$NaN$0,0$00:00:04,636
public class ID { --> class ID {$0$0$1,0$NaN$0,0$00:00:04,926
if ( <...> ) { --> if ( <...> binOP ID ) {$0$0$1,0$NaN$0,0$00:00:04,960
ID.ID(EXPR); EXPR; EXPR; --> EXPR$0$0$1,0$NaN$0,0$00:00:04,681
package ID . ID . ID . context . ID ; --> package ID . ID . ID . ID . ID . embedded ;$0$0$1,0$NaN$0,0$00:00:04,586
import ID . ID . ID . test . ID . ID ; --> import ID . ID . ID . ID . ID . ID ;$0$0$1,0$NaN$0,0$00:00:05,582
<...> --> public ID getInvokerPackage ( ) { return ID ; }$41$0$0,0$0,0$0,0$00:00:03,605
_ --> public ID ID ( ID key , ID < ID , ID > ID ) { <...> . ID ( EXPR , ID ) ; return this ; }$9$0$0,0$0,0$0,0$00:00:04,727
EXPR --> cliOptions.ID(<...>);$0$0$1,0$NaN$0,0$00:00:05,213
