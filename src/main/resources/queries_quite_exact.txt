import com.oracle.ID.ID.ID.*; -->_
ID<0>(ID<1>, args, context); --> ID<0>(ID<1>, args, intrinsic);
annotationWriter.write(appendable, context).append(LT); --> annotationWriter.write(appendable, context).append(ID);
int remainBytes = EXPR<0> = EXPR --> int remainBytes = EXPR<0> = EXPR
_ --> return ID.getValue(<...>);
codeCache.ID(method, compResult); --> <...>
if (ID<0> == null) return; --> if (ID<0> == null) { return; }
_ --> if (EXPR binOP EXPR) { return; }
log.debug(LT, ID); --> LOG.debug(LT, ID);
final Map<String, String> group = EXPR; --> final Map<String, String> group = EXPR;
ID slotSize = WordFactory.unsigned(EXPR); -->_
public static double[][] ID(float[] ID<0>) { return EXPR --> static double[][] ID(float[] ID<0>) { return EXPR
return EXPR; --> return useLibraryConstant(EXPR);
import static <...> -->_
if (EXPR<0>) ID = QueryParamEntity.empty(); --> if (EXPR<0>) { ID = QueryParamEntity.empty(); }
_ -->_ @Override protected ID getToolSupport(ID l) { return l.getToolSupport(); } _ @Override protected ID getDebugSupport(ID l) { return l.getDebugSupport(); }
_ --> res = res binOP LT + (vararg ? LT : LT);
_ -->import io.ID.ID.ID.ID;
package com.oracle.max.graal.ID.ID; -->package com.oracle.graal.ID.ID;
Assert.assertEquals(1, test(<...>)); --> runTest("test", <...>);
